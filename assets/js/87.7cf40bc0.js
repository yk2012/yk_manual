(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{657:function(a,t,s){"use strict";s.r(t);var e=s(7),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"js数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js数据类型"}},[a._v("#")]),a._v(" JS数据类型")]),a._v(" "),s("h1",{attrs:{id:"_1-六种数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-六种数据类型"}},[a._v("#")]),a._v(" 1. 六种数据类型")]),a._v(" "),s("ul",[s("li",[a._v("JS中一共分成六种数据类型 5个基本数据类型+Object")])]),a._v(" "),s("ol",[s("li",[a._v("String 字符串")]),a._v(" "),s("li",[a._v("Number 数值")]),a._v(" "),s("li",[a._v("Boolean 布尔值")]),a._v(" "),s("li",[a._v("Null 空值")]),a._v(" "),s("li",[a._v("Undefined 未定义")]),a._v(" "),s("li",[a._v("Object 对象")])]),a._v(" "),s("ul",[s("li",[a._v("typeof运算符检查数据类型")])]),a._v(" "),s("h1",{attrs:{id:"_2-string-字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-string-字符串"}},[a._v("#")]),a._v(" 2.  String 字符串")]),a._v(" "),s("ul",[s("li",[a._v("JS中的字符串需要使用引号引起来双引号或单引号都行")]),a._v(" "),s("li",[a._v("在字符串中使用\\作为转义字符")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\\'  ==> '  \n\\\"  ==> \"  \n\\n  ==> 换行  \n\\t  ==> 制表符  \n\\\\  ==> \\\n")])])]),s("ul",[s("li",[a._v("使用typeof运算符检查字符串时，会返回”string”")])]),a._v(" "),s("h1",{attrs:{id:"_3-number-数值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-number-数值"}},[a._v("#")]),a._v(" 3. Number 数值")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("JS中所有的整数和浮点数都是Number类型")])]),a._v(" "),s("li",[s("p",[a._v("最大能表示的值：Number.MAX_VALUE= 1.7976931348623157e+308")])]),a._v(" "),s("li",[s("p",[a._v("特殊的数字：能赋值给变量")])])]),a._v(" "),s("ul",[s("li",[a._v("Infinity 正无穷 a = Infinity ,能赋值")]),a._v(" "),s("li",[a._v("-Infinity 负无穷")]),a._v(" "),s("li",[a._v("NaN 非法数字（Not A Number）")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("其他进制的数字的表示：")])]),a._v(" "),s("ul",[s("li",[a._v("0b 开头表示二进制，但是不是所有的浏览器都支持")]),a._v(" "),s("li",[a._v("0 开头表示八进制")]),a._v(" "),s("li",[a._v("0x 开头表示十六进制")])]),a._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[a._v("使用typeof检查一个Number类型的数据时，会返回”number”（包括NaN 和 Infinity）")])]),a._v(" "),s("h1",{attrs:{id:"_4-boolean-布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-boolean-布尔值"}},[a._v("#")]),a._v(" 4. Boolean 布尔值")]),a._v(" "),s("ol",[s("li",[a._v("布尔值主要用来进行逻辑判断，布尔值只有两个")])]),a._v(" "),s("ul",[s("li",[a._v("true 逻辑的真")]),a._v(" "),s("li",[a._v("false 逻辑的假")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("使用typeof检查一个布尔值时，会返回”boolean”")])]),a._v(" "),s("h1",{attrs:{id:"_5-null-空值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-null-空值"}},[a._v("#")]),a._v(" 5. Null 空值")]),a._v(" "),s("ol",[s("li",[a._v("空值专门用来表示为空的对象，Null类型的值只有一个")])]),a._v(" "),s("ul",[s("li",[a._v("null")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("使用typeof检查一个Null类型的值时会返回”object”")])]),a._v(" "),s("h1",{attrs:{id:"_6-undefined-未定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-undefined-未定义"}},[a._v("#")]),a._v(" 6. Undefined 未定义")]),a._v(" "),s("ul",[s("li",[a._v("如果==声明==一个变量==但是没有==为变量==赋值==此时变量的值就是undefined")]),a._v(" "),s("li",[a._v("该类型的值只有一个 undefined")]),a._v(" "),s("li",[a._v("使用typeof检查一个Undefined类型的值时，会返回”undefined”")])]),a._v(" "),s("h1",{attrs:{id:"_7-引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-引用数据类型"}},[a._v("#")]),a._v(" 7. 引用数据类型")]),a._v(" "),s("p",[a._v("Object 对象")]),a._v(" "),s("h1",{attrs:{id:"_8-类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-类型转换"}},[a._v("#")]),a._v(" 8. 类型转换")]),a._v(" "),s("ul",[s("li",[a._v("类型转换就是指将其他的数据类型，转换为String Number 或 Boolean")])]),a._v(" "),s("h2",{attrs:{id:"_8-1-转换为string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-转换为string"}},[a._v("#")]),a._v(" 8.1 转换为String")]),a._v(" "),s("h3",{attrs:{id:"方式一-强制类型转换-调用被转换数据的tostring-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换-调用被转换数据的tostring-方法"}},[a._v("#")]),a._v(" 方式一（强制类型转换）调用被转换数据的toString()方法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var a = 123;\na = a.toString();\n")])])]),s("ul",[s("li",[a._v("注意：这个方法不适用于null和undefined")]),a._v(" "),s("li",[a._v("由于这两个类型的数据中没有方法，所以调用toString()时会报错")])]),a._v(" "),s("h3",{attrs:{id:"方式二-强制类型转换-调用string-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二-强制类型转换-调用string-函数"}},[a._v("#")]),a._v(" 方式二（强制类型转换）调用String()函数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var a = 123;  \na = String(a);\n")])])]),s("ul",[s("li",[a._v("原理：")]),a._v(" "),s("li",[a._v("对于Number，Boolean，String都会调用他们的toString()方法来将其转换为字符串")]),a._v(" "),s("li",[a._v("对于null值，直接转换为字符串”null”")]),a._v(" "),s("li",[a._v("对于undefined直接转换为字符串”undefined”")])]),a._v(" "),s("h3",{attrs:{id:"方式三-隐式的类型转换-为任意的数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式三-隐式的类型转换-为任意的数据类型"}},[a._v("#")]),a._v(" 方式三（隐式的类型转换）为任意的数据类型 +””")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = true;  \na = a + "";\n')])])]),s("ul",[s("li",[a._v("原理：和String()函数一样")])]),a._v(" "),s("h2",{attrs:{id:"_8-2-转换为number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-转换为number"}},[a._v("#")]),a._v(" 8.2 转换为Number")]),a._v(" "),s("h3",{attrs:{id:"方式一-强制类型转换-调用number-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换-调用number-函数"}},[a._v("#")]),a._v(" 方式一（强制类型转换）调用Number()函数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var s = "123";  \ns = Number(s);\n')])])]),s("h3",{attrs:{id:"转换的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换的情况"}},[a._v("#")]),a._v(" 转换的情况")]),a._v(" "),s("ol",[s("li",[a._v("字符串 > 数字")])]),a._v(" "),s("ul",[s("li",[a._v("如果字符串是一个合法的数字，则直接转换为对应的数字")]),a._v(" "),s("li",[a._v("如果字符串是一个非法的数字，则转换为NaN")]),a._v(" "),s("li",[a._v("如果是一个空串或纯空格的字符串，则转换为0")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("布尔值 > 数字")])]),a._v(" "),s("ul",[s("li",[a._v("true转换为1")]),a._v(" "),s("li",[a._v("false转换为0")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("空值 > 数字")])]),a._v(" "),s("ul",[s("li",[a._v("null转换为0")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("未定义 > 数字")])]),a._v(" "),s("ul",[s("li",[a._v("undefined 转换为NaN")])]),a._v(" "),s("h3",{attrs:{id:"方式二-强制类型转换-调用parseint-或parsefloat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二-强制类型转换-调用parseint-或parsefloat"}},[a._v("#")]),a._v(" 方式二（强制类型转换）调用parseInt()或parseFloat()")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("这两个函数专门用来将一个字符串转换为数字的")])]),a._v(" "),s("li",[s("p",[a._v("如果对非String使用parseInt()或parseFloat()，它会先将其转换为String然后在操作 parseInt()")])]),a._v(" "),s("li",[s("p",[a._v("可以将一个字符串中的有效的整数位提取出来，并转换为Number")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = "123.456px";  \na = parseInt(a); //123\n')])])]),s("ul",[s("li",[a._v("如果需要可以在parseInt()中指定一个第二个参数，来指定进制")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("a = parseInt(a, 10) /*转换*/\n")])])]),s("ul",[s("li",[a._v("parseFloat()可以将一个字符串中的有效的小数位提取出来，并转换为Number")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = "123.456px";  \na = parseFloat(a); //123.456\n')])])]),s("h3",{attrs:{id:"方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式三-隐式的类型转换-使用一元的-来进行隐式的类型转换-或二元的"}},[a._v("#")]),a._v(" 方式三（隐式的类型转换）使用一元的+来进行隐式的类型转换(或二元的-*/)")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = "123";  \na = +a;\n')])])]),s("ul",[s("li",[a._v("原理：和Number()函数一样")])]),a._v(" "),s("h2",{attrs:{id:"_8-3-转换为布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-转换为布尔值"}},[a._v("#")]),a._v(" 8.3 转换为布尔值")]),a._v(" "),s("h3",{attrs:{id:"方式一-强制类型转换-使用boolean-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一-强制类型转换-使用boolean-函数"}},[a._v("#")]),a._v(" 方式一（强制类型转换）使用Boolean()函数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var s = "false";  \ns = Boolean(s); //true\n')])])]),s("h3",{attrs:{id:"转换的情况-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换的情况-2"}},[a._v("#")]),a._v(" 转换的情况")]),a._v(" "),s("ol",[s("li",[a._v("字符串 > 布尔")])]),a._v(" "),s("ul",[s("li",[a._v("除了空串其余全是true")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("数值 > 布尔")])]),a._v(" "),s("ul",[s("li",[a._v("除了0和NaN其余的全是true")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("null、undefined > 布尔")])]),a._v(" "),s("ul",[s("li",[a._v("都是false")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("对象 > 布尔")])]),a._v(" "),s("ul",[s("li",[a._v("都是true")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/2eab87340f256001f65e6dbb8247a80e.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二-隐式类型转换-为任意的数据类型做两次非运算-即可将其转换为布尔值"}},[a._v("#")]),a._v(" 方式二（隐式类型转换）为任意的数据类型做两次非运算，即可将其转换为布尔值")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('var a = "hello";  \na = !!a; //true\n')])])]),s("h1",{attrs:{id:"_9-数据类型的判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-数据类型的判断"}},[a._v("#")]),a._v(" 9. 数据类型的判断")]),a._v(" "),s("h2",{attrs:{id:"_9-1-typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-typeof"}},[a._v("#")]),a._v(" 9.1 typeof")]),a._v(" "),s("ul",[s("li",[a._v("是运算符不是函数")]),a._v(" "),s("li",[a._v("返回数据类型的字符串表达")]),a._v(" "),s("li",[a._v("可以判断：undefined / 数值 / 字符串 /布尔值 / function")]),a._v(" "),s("li",[a._v("不能判断：null与object / object和array(都返回object)\ntypeof null ----\x3e object")])]),a._v(" "),s("h2",{attrs:{id:"_9-2-instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-instanceof"}},[a._v("#")]),a._v(" 9.2 instanceof")]),a._v(" "),s("ul",[s("li",[a._v("判断对象的具体类型")])]),a._v(" "),s("h2",{attrs:{id:"_9-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-3"}},[a._v("#")]),a._v(" 9.3 ===")]),a._v(" "),s("ul",[s("li",[a._v("可以判断：undefined / null")])])])}),[],!1,null,null,null);t.default=r.exports}}]);