(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{637:function(a,t,s){"use strict";s.r(t);var r=s(17),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_1-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-运算符"}},[a._v("#")]),a._v(" 1. 运算符")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("运算符也称为操作符")])]),a._v(" "),s("li",[s("p",[a._v("通过运算符可以对一个或多个值进行运算或操作")])]),a._v(" "),s("li",[s("p",[a._v("typeof运算符")])]),a._v(" "),s("li",[s("p",[a._v("用来检查一个变量的数据类型")])])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typeof")]),a._v(" 变量\n")])])]),s("ul",[s("li",[a._v("它会返回一个用于描述类型的字符串作为结果")])]),a._v(" "),s("h2",{attrs:{id:"_1-1-算数运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-算数运算符"}},[a._v("#")]),a._v(" 1.1 算数运算符")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" 对两个值进行加法运算并返回结果，字符串就是拼串\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" 对两个值进行减法运算并返回结果\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" 对两个值进行乘法运算并返回结果\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" 对两个值进行除法运算并返回结果\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" 对两个值进行取余运算并返回结果\n")])])]),s("ul",[s("li",[a._v("除了加法以外，对非Number类型的值进行运算时，都会先转换为Number然后在做运算。")]),a._v(" "),s("li",[a._v("任何值和NaN做运算，结果都是NaN")]),a._v(" "),s("li",[a._v("而做加法运算时，如果是两个字符串进行相加，则会做拼串操作，将两个字符连接为一个字符串。")]),a._v(" "),s("li",[a._v("任何值和字符串做加法，都会先转换为字符串，然后再拼串")])]),a._v(" "),s("h2",{attrs:{id:"_1-2-一元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-一元运算符"}},[a._v("#")]),a._v(" 1.2 一元运算符")]),a._v(" "),s("ul",[s("li",[a._v("一元运算符只需要一个操作数")])]),a._v(" "),s("h3",{attrs:{id:"_1-2-1-一元的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-一元的"}},[a._v("#")]),a._v(" 1.2.1 一元的+")]),a._v(" "),s("p",[a._v("就是正号，不会对值产生任何影响，但是可以将一个非数字转换为数字")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-2-2-一元的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-一元的"}},[a._v("#")]),a._v(" 1.2.2 一元的-")]),a._v(" "),s("p",[a._v("就是负号，可以对一个数字进行符号位取反")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-2-3-自增"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-自增"}},[a._v("#")]),a._v(" 1.2.3 自增")]),a._v(" "),s("ul",[s("li",[a._v("自增可以使变量在原值的基础上自增1")]),a._v(" "),s("li",[a._v("自增使用 ++")]),a._v(" "),s("li",[a._v("自增可以使用 前++（++a）后++(a++)")]),a._v(" "),s("li",[a._v("无论是++a 还是 a++都会立即使原变量自增1")]),a._v(" "),s("li",[a._v("不同的是++a和a++的值是不同的，")]),a._v(" "),s("li",[a._v("++a的值是变量的新值（自增后的值）")]),a._v(" "),s("li",[a._v("a++的值是变量的原值（自增前的值）")])]),a._v(" "),s("h3",{attrs:{id:"_1-2-4自减"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4自减"}},[a._v("#")]),a._v(" 1.2.4自减")]),a._v(" "),s("ul",[s("li",[a._v("自减可以使变量在原值的基础上自减1")]),a._v(" "),s("li",[a._v("自减使用--")]),a._v(" "),s("li",[a._v("自减可以使用 前（a）后(a)")]),a._v(" "),s("li",[a._v("无论是a 还是 a都会立即使原变量自减1")]),a._v(" "),s("li",[a._v("不同的是a和a的值是不同的，")]),a._v(" "),s("li",[a._v("a的值是变量的新值（自减后的值）")]),a._v(" "),s("li",[a._v("a的值是变量的原值（自减前的值）")])]),a._v(" "),s("h2",{attrs:{id:"_1-3-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-逻辑运算符"}},[a._v("#")]),a._v(" 1.3 逻辑运算符")]),a._v(" "),s("h3",{attrs:{id:"_1-3-1-非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-非"}},[a._v("#")]),a._v(" 1.3.1 ! 非")]),a._v(" "),s("ul",[s("li",[a._v("非运算可以对一个布尔值进行取反，true变false false边true")]),a._v(" "),s("li",[a._v("当对非布尔值使用!时，会先将其转换为布尔值然后再取反")]),a._v(" "),s("li",[a._v("我们可以利用!来将其他的数据类型转换为布尔值")])]),a._v(" "),s("h3",{attrs:{id:"_1-3-2-与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-与"}},[a._v("#")]),a._v(" 1.3.2 && 与")]),a._v(" "),s("ul",[s("li",[a._v("&&可以对符号两侧的值进行与运算")]),a._v(" "),s("li",[a._v("只有两端的值都为true时，才会返回true。只要有一个false就会返回false。")]),a._v(" "),s("li",[a._v("与是一个短路的与，==如果第一个值是false，则不再检查第二个值==")]),a._v(" "),s("li",[a._v("对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值")])]),a._v(" "),s("p",[a._v("规则")]),a._v(" "),s("ol",[s("li",[a._v("如果第一个值为false，则返回第一个值")]),a._v(" "),s("li",[a._v("如果第一个值为true，则返回第二个值")])]),a._v(" "),s("h3",{attrs:{id:"_1-3-3-或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-或"}},[a._v("#")]),a._v(" 1.3.3 || 或")]),a._v(" "),s("ul",[s("li",[a._v("||可以对符号两侧的值进行或运算")]),a._v(" "),s("li",[a._v("只有两端都是false时，才会返回false。只要有一个true，就会返回true。")]),a._v(" "),s("li",[a._v("或是一个短路的或，如果第一个值是true，则不再检查第二个值")]),a._v(" "),s("li",[a._v("对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值")])]),a._v(" "),s("p",[a._v("规则")]),a._v(" "),s("ol",[s("li",[a._v("如果第一个值为true，则返回第一个值")]),a._v(" "),s("li",[a._v("如果第一个值为false，则返回第二个值")])]),a._v(" "),s("h2",{attrs:{id:"_1-4-赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-赋值运算符"}},[a._v("#")]),a._v(" 1.4 赋值运算符")]),a._v(" "),s("ul",[s("li",[a._v("= 可以将符号右侧的值赋值给左侧变量")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" 相当于 a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("  相当于 a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" 相当于 a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" 相当于 a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" 相当于 a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),s("h2",{attrs:{id:"_1-5-关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-关系运算符"}},[a._v("#")]),a._v(" 1.5 关系运算符 > < >= <=")]),a._v(" "),s("ul",[s("li",[a._v("关系运算符用来比较两个值之间的大小关系的")]),a._v(" "),s("li",[a._v("关系运算符的规则和数学中一致，用来比较两个值之间的关系，")]),a._v(" "),s("li",[a._v("如果关系成立则返回true，关系不成立则返回false。")]),a._v(" "),s("li",[a._v("如果比较的两个值是非数值，会将其转换为Number然后再比较。")]),a._v(" "),s("li",[a._v("如果比较的两个值都是字符串，此时会比较字符串的Unicode编码，而不会转换为Number。")])]),a._v(" "),s("h2",{attrs:{id:"_1-6-相等运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-相等运算符"}},[a._v("#")]),a._v(" 1.6 相等运算符")]),a._v(" "),s("h3",{attrs:{id:"_1-6-1-相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-相等"}},[a._v("#")]),a._v(" 1.6.1 == 相等")]),a._v(" "),s("ul",[s("li",[a._v("判断左右两个值是否相等，如果相等返回true，如果不等返回false")]),a._v(" "),s("li",[a._v("相等会自动对两个值进行类型转换，如果对不同的类型进行比较，会将其转换为相同的类型然后再比较，转换后相等它也会返回true，null == undifined")])]),a._v(" "),s("h3",{attrs:{id:"_1-6-2-不等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-不等"}},[a._v("#")]),a._v(" 1.6.2 !=不等")]),a._v(" "),s("ul",[s("li",[a._v("判断左右两个值是否不等，如果不等则返回true，如果相等则返回false")]),a._v(" "),s("li",[a._v("不等也会做自动的类型转换。")])]),a._v(" "),s("h3",{attrs:{id:"_1-6-3-全等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-全等"}},[a._v("#")]),a._v(" 1.6.3 ===全等")]),a._v(" "),s("ul",[s("li",[a._v("判断左右两个值是否全等，它和相等类似，只不过它不会进行自动的类型转换，")]),a._v(" "),s("li",[a._v("如果两个值的类型不同，则直接返回false")])]),a._v(" "),s("h3",{attrs:{id:"_1-6-4-不全等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-4-不全等"}},[a._v("#")]),a._v(" 1.6.4 !==不全等")]),a._v(" "),s("ul",[s("li",[a._v("和不等类似，但是它不会进行自动的类型转换，如果两个值的类型不同，它会直接返回true")])]),a._v(" "),s("h2",{attrs:{id:"_1-7-特殊的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-特殊的值"}},[a._v("#")]),a._v(" 1.7 特殊的值：")]),a._v(" "),s("h3",{attrs:{id:"_1-7-1-null和undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-1-null和undefined"}},[a._v("#")]),a._v(" 1.7.1 null和undefined")]),a._v(" "),s("ul",[s("li",[a._v("由于undefined衍生自null，所以null == undefined 会返回true。")]),a._v(" "),s("li",[a._v("但是 null === undefined 会返回false")])]),a._v(" "),s("h3",{attrs:{id:"_1-7-2-nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-2-nan"}},[a._v("#")]),a._v(" 1.7.2 NaN")]),a._v(" "),s("ul",[s("li",[a._v("NaN不与任何值相等，报告它自身 NaN == NaN //false")]),a._v(" "),s("li",[a._v("判断一个值是否是NaN，使用isNaN()函数")])]),a._v(" "),s("h2",{attrs:{id:"_1-8三元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8三元运算符"}},[a._v("#")]),a._v(" 1.8三元运算符 ?:")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("语句"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("语句"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("先对条件表达式求值判断，")]),a._v(" "),s("li",[a._v("如果判断结果为true，则执行语句1，并返回执行结果")]),a._v(" "),s("li",[a._v("如果判断结果为false，则执行语句2，并返回执行结果")])]),a._v(" "),s("h2",{attrs:{id:"_1-9-优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-优先级"}},[a._v("#")]),a._v(" 1.9 优先级")]),a._v(" "),s("ul",[s("li",[a._v("和数学中一样，JS中的运算符也是具有优先级的，")]),a._v(" "),s("li",[a._v("比如 先乘除 后加减 先与 后或")]),a._v(" "),s("li",[a._v("具体的优先级可以参考优先级的表格，在表格中越靠上的优先级越高，")]),a._v(" "),s("li",[a._v("优先级越高的越优先计算，优先级相同的，从左往右计算。")]),a._v(" "),s("li",[a._v("优先级不需要记忆，如果越到拿不准的，使用()来改变优先级。")])]),a._v(" "),s("h1",{attrs:{id:"_2-流程控制语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-流程控制语句"}},[a._v("#")]),a._v(" 2. 流程控制语句")]),a._v(" "),s("ul",[s("li",[a._v("程序都是自上向下的顺序执行的，")]),a._v(" "),s("li",[a._v("通过流程控制语句可以改变程序执行的顺序，或者反复的执行某一段的程序。")])]),a._v(" "),s("h2",{attrs:{id:"_2-1-条件判断语句if语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-条件判断语句if语句"}},[a._v("#")]),a._v(" 2.1 条件判断语句if语句")]),a._v(" "),s("h4",{attrs:{id:"语法一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法一"}},[a._v("#")]),a._v(" 语法一")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("if语句执行时，会先对条件表达式进行求值判断，")]),a._v(" "),s("li",[a._v("如果值为true，则执行if后的语句")]),a._v(" "),s("li",[a._v("如果值为false，则不执行")])]),a._v(" "),s("h4",{attrs:{id:"语法二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法二"}},[a._v("#")]),a._v(" 语法二")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("if...else语句执行时，会对条件表达式进行求值判断，")]),a._v(" "),s("li",[a._v("如果值为true，则执行if后的语句")]),a._v(" "),s("li",[a._v("如果值为false，则执行else后的语句")])]),a._v(" "),s("h4",{attrs:{id:"语法三"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法三"}},[a._v("#")]),a._v(" 语法三")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("执行流程")]),a._v(" "),s("ol",[s("li",[a._v("if...else if...else语句执行时，会自上至下依次对条件表达式进行求值判断，")]),a._v(" "),s("li",[a._v("如果判断结果为true，则执行当前if后的语句，执行完成后语句结束。")]),a._v(" "),s("li",[a._v("如果判断结果为false，则继续向下判断，直到找到为true的为止。")]),a._v(" "),s("li",[a._v("如果所有的条件表达式都是false，则执行else后的语句")])]),a._v(" "),s("h2",{attrs:{id:"_2-2-条件分支语句-switch语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-条件分支语句-switch语句"}},[a._v("#")]),a._v(" 2.2 条件分支语句 switch语句")]),a._v(" "),s("h4",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("switch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("表达式")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("  \n\t\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("表达式")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("  \n\t\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("表达式")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("  \n\t\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("  \n\t\t语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，")]),a._v(" "),s("li",[a._v("如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。")]),a._v(" "),s("li",[a._v("如果所有的case判断结果都为false，则从default处开始执行代码。")])]),a._v(" "),s("h2",{attrs:{id:"_2-3-循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-循环语句"}},[a._v("#")]),a._v(" 2.3 循环语句")]),a._v(" "),s("ul",[s("li",[a._v("通过循环语句可以反复执行某些语句多次")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-1-while循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-while循环"}},[a._v("#")]),a._v(" 2.3.1 while循环")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n    语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("while语句在执行时，会先对条件表达式进行求值判断，")]),a._v(" "),s("li",[a._v("如果判断结果为false，则终止循环")]),a._v(" "),s("li",[a._v("如果判断结果为true，则执行循环体")]),a._v(" "),s("li",[a._v("循环体执行完毕，继续对条件表达式进行求值判断，依此类推")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-2-do-while循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-do-while循环"}},[a._v("#")]),a._v(" 2.3.2 do…while循环")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，")]),a._v(" "),s("li",[a._v("如果判断判断结果为false，则终止循环。")]),a._v(" "),s("li",[a._v("如果判断结果为true，则继续执行循环体，依此类推")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-3-do-while循环和while的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-do-while循环和while的区别"}},[a._v("#")]),a._v(" 2.3.3 do…while循环和while的区别：")]),a._v(" "),s("ol",[s("li",[a._v("while：先判断后执行")]),a._v(" "),s("li",[a._v("do…while: 先执行后判断")]),a._v(" "),s("li",[a._v("do…while可以确保循环体至少执行一次。")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-4-for循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-for循环"}},[a._v("#")]),a._v(" 2.3.4 for循环")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("①初始化表达式 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ②条件表达式 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" ④更新表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n    ③语句"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("执行流程")])]),a._v(" "),s("ol",[s("li",[a._v("首先执行①初始化表达式，初始化一个变量，")]),a._v(" "),s("li",[a._v("然后对②条件表达式进行求值判断，如果为false则终止循环")]),a._v(" "),s("li",[a._v("如果判断结果为true，则执行③循环体")]),a._v(" "),s("li",[a._v("循环体执行完毕，执行④更新表达式，对变量进行更新。")]),a._v(" "),s("li",[a._v("更新表达式执行完毕重复②")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-5-死循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-5-死循环"}},[a._v("#")]),a._v(" 2.3.5 死循环")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);